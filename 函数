##函数也是一个对象
##函数可以用来保存一些可执行的代码，并且可以在需要时，对这些语句进行多次的调用
#创建函数：
    #def 函数名 （[形参1，形参2.....形参n]）
        #代码块

def fn () :
    print('这是我的一个函数')
#函数中保存的代码不会立即执行
print(fn) #<function fn at 0x000001E9AE4F8400>
#调用函数
    #函数名（）
fn()
#fn是函数对象，fn()调用函数

'''
函数的参数
在定义函数时。可以在函数名后的（）中定义数量不等的形参，多个形参之间使用，隔开
形参，定义形参就相当于在函数内部声明了变量，但是并不赋值
    定义形参时，可以为形参指定默认值
    指定了默认值以后，如果用户传递了参数则默认值没有任何作用
    如果用户没有传递，则默认值就会生效
    
实参  
    如果函数定义时指定了形参，那么在调用函数时也必须传递实参，实参将会赋值给对应的形参
    实参的传递方式：
        位置参数，就是将对应位置的实参赋值给形参
        关键字参数，可以不按照形参定义的顺序去传递，而直接根据形参名去传递
        位置参数和关键字参数可以混合使用，必须将位置参数写到前面
'''
'''
函数在调用时，解析器不会检查实参的类型
实参可以传递任意类型的对象

'''
#在函数中对形参进行重新赋值，不好会影响其他的变量
#如果形参执行的是一个对象，当我们通过形参去修改对象时，会影响到所以指向该对象的变量


'''
不定长的参数
在定义函数时，可以在形参前边加一个*，这样这个形参将会获取到所有的实参
它将会将所有的实参保存到一个元组中（装包）
带*的形参只能有一个，可以和其他参数配合使用
可变参数不是必须写在最后，但是注意，带*的参数后的所有参数，必须以关键字的形式传递
*形参只能接受位置参数，而不能接受关键字参数
**形参可以直接接受其他的关键字参数，他会将这些参数统一保存到一个字典中
    字典的key就是参数的名，字典的value就是参数的值
**形参只有一个，并且必须写在所有参数的最后
'''

def sum (*nums):
    result = 0
    for n in nums:
        result += n
    print(result)

'''
参数的解包
*对元组、序列解包
**对字典解包
'''

'''
返回值 
通过return来指定返回值
可以之间使用函数的返回值，也可以通过一个变量来接收函数的返回值
如果仅仅写一个return 或者 不写return，则相当于 return None
在函数中，return后的代码都不会执行，return 一旦执行函数自动结束

'''
def fn ():
    return 100
fn()

'''
文档字符串(doc str)
help（）是Python中的内置函数
通过help（）可以查询Python中的函数的用法
在定义函数时，可以在函数内部编写文档字符串，文档字符串就是函数的说明
    当我们编写了文档字符串时，可以通过help（）函数来查看函数的说明
    文档字符串非常简单，其实直接在函数第一行写一个字符串就是文档字符串
    

'''
help(print)

'''
作用域（scope）
    指的是变量生效的区域
在Python中一共有两种作用域
全局作用域
    全局作用域在程序执行时创建，在执行结束时销毁
    所有函数以外的区域都是全局作用域
    在全局作用域中定义的变量，都属于全局变量，全局变量可以在程序的任意位置被访问
    
函数作用域
    在函数调用时创建，调用结束时销毁
    每一次调用就会产生一个新的作用域
    在函数定义域中定义的变量，都是全局变量，它只能在函数内部被访问
    在函数中为变量赋值时，默认都是局部变量复制
变量的查找
    当我们使用变量时，会优先在当前作用域中寻找该变量，如果有则使用
    如果没有则继续去上一层作用域中寻找，以此类推
    直到找到全局作用域依旧没有找到，则会抛出异常
如果希望函数内部修改全局变量，则需要使用global关键字，来声明变量
'''
