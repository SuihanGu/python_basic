'''
'''
'''
字典（dict）
    字典属于一种新的数据结构，称为映射（mapping）
    字典的作用和列表类似，都是用来存储对象的容器
    列表存储数据的性能很好，但查询数据的性能很差
    在字典中每一个元素都有一个唯一的名字，通过这个唯一的名字可以快速地查找到指定的元素
    在查询元素时，字典的效率是非常快的
    在字典中可以保存多个对象，每个对象都会有一个唯一的名字
        这个唯一的名字，我们称其为键（key）,通过key可以快速查询value
        所以字典，我们也称为键值对（key-value）结构
        每个字典中都可以有多个键值对，而每一个键值对我们称其为一项（item）
        
'''
#使用{}创建
d = {}
#语法：{key:value,key:value}
#字典的值任意
#字典的键是任意不可变对象
    #字典的键是不能重复的，如果出现后面会替换前面的
d = {'name':'sunwukong','age':'18','gender':'nan'}
print(d['name'])

'''
'''
#使用dict()创建
#每一个参数都是一个键值对，参数名就是键，参数名就是值（这种方式创建的都是字符串）

d = dict(name='sunwukong')
#也可以将一个包含双值子序列的序列转换为字典
#双值序列，序列中只有两个值，[1,2] ('a',3) 'ab'
#子序列，如果序列中的元素也是序列，那么我们就称这个元素为子序列
d = dict([('name','sunwukong'),('age','18')])
print(d,type(d))

#len()获取字典中键值对的个数

#in not in
    #in 检查字典中是否包含指定的键

#获取字典中的值，根据键来获取值
#语法： d[key]
print(d['name'])    #必须加引号

#通过【】来获取值时，如果键不存在，会抛出异常
#get(key[,default])根据键来获取值
#如果我们获取的值不存在，会返回None



#修改字典
#d[key] = value 如果存在 覆盖，不存在 添加
d['name'] = 'baigujing'

#setdefault(key[,default])
#   如果key已经存在于字典中，则返回key的值，不会字典做任何操作
#   如果不存在，则添加key，并设置value

#update([other])
#将其他的字典中的key-value添加到当前字典中
#如果存在就替换
d = {'a':1,'b':2,'c':4}
d1 = {'d':5,'a':7}
d.update(d1)
print(d)
#删除del
#popitem
#随机删除字典中的一个键值对，一般都会删除最后一个键值对
#   删除之后，会将删除的key-value作为返回值返回
d.popitem()
result = d.popitem()
print(result)
#pop(key[,default])
#根据key删除字典中的key-value
#会将被删除的value返回
#如果我们获取的值不存在，会返回None
#clear()
# 该方法用来对字典进行浅复制
#复制以后的对象，河源对象独立，修改一个不会影响另一个
#注意，浅复制会简单复制对象内部的值，如果只也是一个可变对象，这个可变对象被复制
d2 = d.copy()
print(d, id(d))
print(d2, id(d2))

d = {'a':{'name':'sun','age':18},'b':45}
d2 = d.copy()
d2['a']['name'] = 'zhu'
print(d, id(d))
print(d2, id(d2))
'''
'''
#遍历字典
#keys()      返回字典的所有key
#       该方法会返回一个序列，序列中保存有字典中的所有key
print(d.keys())
#values()    该方法会返回一个序列，序列中保存有字典的左右的值
for v in d.values():
    print(v)

#items()    返回字典中所有的项
#它会返回一个序列，序列中包含有双值子序列
#双值分别是key,value
print(d.items())
